// Code generated by protoc-gen-go. DO NOT EDIT.
// source: section-3-3/proto/fibonacci.proto

package fibonacci

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FibonacciRequest struct {
	Number               uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibonacciRequest) Reset()         { *m = FibonacciRequest{} }
func (m *FibonacciRequest) String() string { return proto.CompactTextString(m) }
func (*FibonacciRequest) ProtoMessage()    {}
func (*FibonacciRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94555dc5b440eb20, []int{0}
}

func (m *FibonacciRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibonacciRequest.Unmarshal(m, b)
}
func (m *FibonacciRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibonacciRequest.Marshal(b, m, deterministic)
}
func (m *FibonacciRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibonacciRequest.Merge(m, src)
}
func (m *FibonacciRequest) XXX_Size() int {
	return xxx_messageInfo_FibonacciRequest.Size(m)
}
func (m *FibonacciRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FibonacciRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FibonacciRequest proto.InternalMessageInfo

func (m *FibonacciRequest) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type FibonacciReply struct {
	Result               uint64   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	ProcessingTime       uint64   `protobuf:"varint,2,opt,name=processingTime,proto3" json:"processingTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibonacciReply) Reset()         { *m = FibonacciReply{} }
func (m *FibonacciReply) String() string { return proto.CompactTextString(m) }
func (*FibonacciReply) ProtoMessage()    {}
func (*FibonacciReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_94555dc5b440eb20, []int{1}
}

func (m *FibonacciReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibonacciReply.Unmarshal(m, b)
}
func (m *FibonacciReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibonacciReply.Marshal(b, m, deterministic)
}
func (m *FibonacciReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibonacciReply.Merge(m, src)
}
func (m *FibonacciReply) XXX_Size() int {
	return xxx_messageInfo_FibonacciReply.Size(m)
}
func (m *FibonacciReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FibonacciReply.DiscardUnknown(m)
}

var xxx_messageInfo_FibonacciReply proto.InternalMessageInfo

func (m *FibonacciReply) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *FibonacciReply) GetProcessingTime() uint64 {
	if m != nil {
		return m.ProcessingTime
	}
	return 0
}

func init() {
	proto.RegisterType((*FibonacciRequest)(nil), "fibonacci.FibonacciRequest")
	proto.RegisterType((*FibonacciReply)(nil), "fibonacci.FibonacciReply")
}

func init() { proto.RegisterFile("section-3-3/proto/fibonacci.proto", fileDescriptor_94555dc5b440eb20) }

var fileDescriptor_94555dc5b440eb20 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x4e, 0x4d, 0x2e,
	0xc9, 0xcc, 0xcf, 0xd3, 0x35, 0xd6, 0x35, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcb,
	0x4c, 0xca, 0xcf, 0x4b, 0x4c, 0x4e, 0xce, 0xd4, 0x03, 0xf3, 0x85, 0x38, 0xe1, 0x02, 0x4a, 0x5a,
	0x5c, 0x02, 0x6e, 0x30, 0x4e, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17, 0x5b,
	0x5e, 0x69, 0x6e, 0x52, 0x6a, 0x91, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6f, 0x10, 0x94, 0xa7, 0x14,
	0xc0, 0xc5, 0x87, 0xa4, 0xb6, 0x20, 0xa7, 0x12, 0xa4, 0xb2, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x04,
	0xac, 0x92, 0x25, 0x08, 0xca, 0x13, 0x52, 0xe3, 0xe2, 0x2b, 0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e,
	0xce, 0xcc, 0x4b, 0x0f, 0xc9, 0xcc, 0x4d, 0x95, 0x60, 0x02, 0xcb, 0xa3, 0x89, 0x1a, 0x05, 0x71,
	0x71, 0xc2, 0x4d, 0x14, 0x72, 0xe5, 0xe2, 0x74, 0x4e, 0xcc, 0x49, 0x2e, 0xcd, 0x49, 0x2c, 0x49,
	0x15, 0x92, 0xd6, 0x43, 0x38, 0x1a, 0xdd, 0x81, 0x52, 0x92, 0xd8, 0x25, 0x0b, 0x72, 0x2a, 0x95,
	0x18, 0x92, 0xd8, 0xc0, 0x7e, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x66, 0xa3, 0x0a, 0x03,
	0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	Calculate(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciReply, error)
}

type fibonacciClient struct {
	cc *grpc.ClientConn
}

func NewFibonacciClient(cc *grpc.ClientConn) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) Calculate(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciReply, error) {
	out := new(FibonacciReply)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/Calculate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	Calculate(context.Context, *FibonacciRequest) (*FibonacciReply, error)
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).Calculate(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calculate",
			Handler:    _Fibonacci_Calculate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "section-3-3/proto/fibonacci.proto",
}
